import { useState, useEffect } from 'react';

export function useCart() {
  const [cart, setCart] = useState(() => {
    const saved = localStorage.getItem('grocerymate_cart');
    return saved ? JSON.parse(saved) : [];
  });

  const [totals, setTotals] = useState({
    subtotalBeforeDiscount: 0,
    totalDiscountAmount: 0,
    subtotalAfterDiscount: 0,
    vatAmount: 0,
    finalTotal: 0
  });

  useEffect(() => {
    localStorage.setItem('grocerymate_cart', JSON.stringify(cart));
    calculateTotals();
  }, [cart]);

  const addToCart = (product) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(item => item.productId === product.id);
      if (existingItem) {
        return prevCart.map(item => 
          item.productId === product.id 
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      }
      return [...prevCart, {
        productId: product.id,
        name: product.name,
        price: product.price,
        quantity: 1,
        discountPercentage: product.discountPercentage || 0
      }];
    });
  };

  const removeFromCart = (productId) => {
    setCart(prevCart => prevCart.filter(item => item.productId !== productId));
  };

  const updateQuantity = (productId, quantity) => {
    if (quantity < 1) return;
    setCart(prevCart => prevCart.map(item =>
      item.productId === productId
        ? { ...item, quantity: parseInt(quantity) }
        : item
    ));
  };

  const updateDiscount = (productId, discountPercentage) => {
    const discount = Math.min(Math.max(parseFloat(discountPercentage) || 0, 0), 100);
    setCart(prevCart => prevCart.map(item =>
      item.productId === productId
        ? { ...item, discountPercentage: discount }
        : item
    ));
  };

  const clearCart = () => {
    setCart([]);
    localStorage.removeItem('grocerymate_cart');
  };

  const getFormattedCart = () => {
    return cart.map(item => ({
      productID: item.productId,
      quantity: item.quantity,
      unitPrice: item.price,
      discountPercentage: item.discountPercentage,
      subtotal: item.price * item.quantity * (1 - item.discountPercentage / 100)
    }));
  };

  const calculateTotals = () => {
    const subtotal = cart.reduce((sum, item) => 
      sum + (item.price * item.quantity), 0);
    const totalDiscount = cart.reduce((sum, item) => 
      sum + (item.price * item.quantity * (item.discountPercentage / 100)), 0);
    const afterDiscount = subtotal - totalDiscount;
    const vat = afterDiscount * 0.15; // 15% VAT

    setTotals({
      subtotalBeforeDiscount: subtotal,
      totalDiscountAmount: totalDiscount,
      subtotalAfterDiscount: afterDiscount,
      vatAmount: vat,
      finalTotal: afterDiscount + vat
    });
  };

  return {
    cart,
    totals,
    addToCart,
    removeFromCart,
    updateQuantity,
    updateDiscount,
    clearCart,
    getFormattedCart
  };
}
